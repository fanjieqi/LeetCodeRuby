def get_father(i)
  (@father[i].nil? || @father[i] == i) ? i : @father[i] = get_father(@father[i])
end

# @param {Integer[][]} graph
# @param {Integer[]} initial
# @return {Integer}
def min_malware_spread(graph, initial)
  @father = []
  graph.each_with_index do |row, i|
    row.each_with_index do |tmp, j|
      next if tmp.zero?
      @father[get_father(j)] = get_father(i)
    end
  end
  total, count = [], []
  (0..graph.size-1).each do |i|
    total[get_father(i)] ||= 0
    total[get_father(i)]  += 1
  end
  initial.each do |i|
    count[get_father(i)] ||= 0
    count[get_father(i)]  += 1
  end
  maxi, ans = nil, initial.min
  (0..graph.size-1).each do |i|
    fi = get_father(i)
    if count[fi] == 1 && (maxi.nil? || total[fi] > total[maxi])
      maxi = fi
      ans = initial.find { |j| get_father(j) == fi }
    end
  end
  ans
end
