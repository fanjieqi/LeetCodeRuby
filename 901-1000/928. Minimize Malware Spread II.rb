def get_father(i)
  (@father[i].nil? || @father[i] == i) ? i : @father[i] = get_father(@father[i])
end

# @param {Integer[][]} graph
# @param {Integer[]} initial
# @return {Integer}
def min_malware_spread(graph, initial)
  malwares = initial.inject({}) { |tmp, i| tmp[i] = true; tmp }
  @father = []
  graph.each_with_index do |row, i|
    next if malwares[i]
    row.each_with_index do |tmp, j|
      next if malwares[j] || tmp.zero?
      @father[get_father(j)] = get_father(i)
    end
  end

  total = []
  (0..graph.size-1).each do |i|
    total[get_father(i)] ||= 0
    total[get_father(i)]  += 1
  end

  infected = []
  initial.each do |i|
    infected[i] = graph[i].map.with_index { |tmp, j| tmp == 1 ? get_father(j) : nil }.uniq.compact
  end

  max, ans = nil, initial.min
  infected.each_with_index do |tmp1, i|
    next if tmp1.nil?
    tmp1 -= [i]
    infected.each_with_index do |tmp2, j|
      next if i == j || tmp2.nil?
      tmp1 -= tmp2
    end
    count = tmp1.inject(0) { |sum, k| sum += total[k] }
    if max.nil? || count > max.to_i
      max = count
      ans = i
    end
  end
  ans
end
